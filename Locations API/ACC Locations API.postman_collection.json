{
	"info": {
		"_postman_id": "4788af94-0cbc-424a-b990-26277ba70df5",
		"name": "ACC Locations API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "343460"
	},
	"item": [
		{
			"name": "Tutorials",
			"item": [
				{
					"name": "Configure a Locations Tree",
					"item": [
						{
							"name": "Step 0: Run Firstly-Get Project ID",
							"item": [
								{
									"name": "GET one ACC account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// find the specified project and setup the environment variable \"hub_id\"",
													"const hub_name = pm.environment.get(\"hub_name\");",
													"pm.test(\"find matches account by name: \" + hub_name, function () {",
													"    const body = JSON.parse(responseBody);",
													"    const found = body.data.find(d => d.attributes.name == hub_name);",
													"",
													"    pm.expect(found).to.not.be.undefined;",
													"    ",
													"    pm.environment.set(\"hub_id\", found.id);",
													"    pm.environment.set(\"account_id\", found.id.split(\"b.\").join(\"\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"hub_name\", \"change to your hub/account name\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_domain}}/project/v1/hubs?filter[extension.type]=hubs:autodesk.bim360:Account",
											"host": [
												"{{base_domain}}"
											],
											"path": [
												"project",
												"v1",
												"hubs"
											],
											"query": [
												{
													"key": "filter[extension.type]",
													"value": "hubs:autodesk.bim360:Account"
												}
											]
										},
										"description": "Returns a collection of accessible hubs for this member.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-GET/"
									},
									"response": []
								},
								{
									"name": "GET one ACC project",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"project_name\", \"change to your project name\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// find the specified project and setup the environment variable \"project_id\"",
													"const project_name = pm.environment.get(\"project_name\") ",
													"pm.test(\"find matches project by name: \" + project_name, function () {",
													"    const body = JSON.parse(responseBody);",
													"    const found = body.data.find(d => d.attributes.name == project_name)",
													"",
													"    pm.expect(found).to.not.be.undefined;",
													"    ",
													"    postman.setEnvironmentVariable(\"project_id\", found.id);",
													"    postman.setEnvironmentVariable(\"project_id_without_b\", found.id.split(\"b.\").join(\"\"));",
													"    postman.setEnvironmentVariable(\"lbs_container_id\", found.id.split(\"b.\").join(\"\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_domain}}project/v1/hubs/{{hub_id}}/projects",
											"host": [
												"{{base_domain}}project"
											],
											"path": [
												"v1",
												"hubs",
												"{{hub_id}}",
												"projects"
											]
										},
										"description": "Returns a collection of projects for a given hub_id. A project represents a BIM 360 Team project, a Fusion Team project, a BIM 360 Docs project, or an A360 Personal project. Multiple projects can be created within a single hub.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-hub_id-projects-GET/"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Step 2: Create the first and second floor nodes",
							"item": [
								{
									"name": "Step 2.1: Create the second floor node",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.have.property(\"id\");",
													"    pm.environment.set(\"lbs_node_id\", responseBody.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parentId\": \"{{lbs_node_parent_id}}\",\n    \"type\": \"Area\",\n    \"name\": \"Floor 2\",\n    \"barcode\": \"barcodeFloor2\"\n}"
										},
										"url": {
											"raw": "{{base_domain}}construction/locations/v2/projects/:projectId/trees/:treeId/nodes",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"locations",
												"v2",
												"projects",
												":projectId",
												"trees",
												":treeId",
												"nodes"
											],
											"query": [
												{
													"key": "targetNodeId",
													"value": "032cdf7c-0d8f-476b-b338-7de55718535f",
													"description": "Where to insert the new node. Unique identifier of a node. Must have the same parent as the new node.",
													"disabled": true
												},
												{
													"key": "insertOption",
													"value": "Before",
													"description": "Where to insert the new node relative to the target node. Do not specify this if targetNodeId is omitted. Possible values: After, Before",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{lbs_container_id}}"
												},
												{
													"key": "treeId",
													"value": "default"
												}
											]
										},
										"description": "Get all Assets paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-assets-GET/"
									},
									"response": []
								},
								{
									"name": "Step 2.2: Create the first floor node",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.have.property(\"id\");",
													"    pm.environment.set(\"lbs_node_id\", responseBody.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parentId\": \"{{lbs_node_parent_id}}\",\n    \"type\": \"Area\",\n    \"name\": \"Floor 1\",\n    \"barcode\": \"barcodeFloor1\"\n}"
										},
										"url": {
											"raw": "{{base_domain}}construction/locations/v2/projects/:projectId/trees/:treeId/nodes?targetNodeId={{lbs_node_id}}&insertOption=Before",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"locations",
												"v2",
												"projects",
												":projectId",
												"trees",
												":treeId",
												"nodes"
											],
											"query": [
												{
													"key": "targetNodeId",
													"value": "{{lbs_node_id}}",
													"description": "Where to insert the new node. Unique identifier of a node. Must have the same parent as the new node."
												},
												{
													"key": "insertOption",
													"value": "Before",
													"description": "Where to insert the new node relative to the target node. Do not specify this if targetNodeId is omitted. Possible values: After, Before"
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{lbs_container_id}}"
												},
												{
													"key": "treeId",
													"value": "default"
												}
											]
										},
										"description": "Get all Assets paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-assets-GET/"
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 3: Create a second floor suite node",
							"item": [
								{
									"name": "Step 3.1: Retrieve the parent node ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
													"    pm.expect(responseBody.results).to.be.an(\"array\");",
													"",
													"    if(responseBody.results.length > 0) {",
													"        const found = responseBody.results.find(node => node.barcode == \"barcodeFloor2\");",
													"        pm.expect(found).to.have.property(\"id\");",
													"        pm.environment.set(\"lbs_node_parent_id\", found.id);",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_domain}}construction/locations/v2/projects/:projectId/trees/:treeId/nodes",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"locations",
												"v2",
												"projects",
												":projectId",
												"trees",
												":treeId",
												"nodes"
											],
											"query": [
												{
													"key": "filter[id]",
													"value": "88e07ccb-4594-4dc5-8973-304412b8fa96,de9aca33-5e0c-4668-85fa-f96273db4b35",
													"description": "Retrieves information about specified nodes (locations) in the tree. Separate multiple values with commas. For example, filter[id]=88e07ccb-4594-4dc5-8973-304412b8fa96,de9aca33-5e0c-4668-85fa-f96273db4b35. Note that the filter includes information about the path of node in the tree hierarchy.",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "10000",
													"description": "The maximum number of nodes per page. Acceptable values: 1-10000. Default value: 10000.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Number of nodes into the collection that the pagination starts on. This is zero-based.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{lbs_container_id}}",
													"description": "The project ID"
												},
												{
													"key": "treeId",
													"value": "default",
													"description": "The tree ID; must be default. Currently, you can only add one tree (default) to a project. However, in future versions we will support adding more than one tree to a project, and you will be able to select a specific tree."
												}
											]
										},
										"description": "Get all Assets paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-assets-GET/"
									},
									"response": []
								},
								{
									"name": "Step 3.2: Create a second floor suite node",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"    pm.expect(responseBody).to.have.property(\"id\");",
													"    pm.environment.set(\"lbs_node_id\", responseBody.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parentId\": \"{{lbs_node_parent_id}}\",\n    \"type\": \"Area\",\n    \"name\": \"Suite 205\",\n    \"barcode\": \"barcodeSuite205\"\n}"
										},
										"url": {
											"raw": "{{base_domain}}construction/locations/v2/projects/:projectId/trees/:treeId/nodes",
											"host": [
												"{{base_domain}}construction"
											],
											"path": [
												"locations",
												"v2",
												"projects",
												":projectId",
												"trees",
												":treeId",
												"nodes"
											],
											"query": [
												{
													"key": "targetNodeId",
													"value": "{{lbs_node_id}}",
													"description": "Where to insert the new node. Unique identifier of a node. Must have the same parent as the new node.",
													"disabled": true
												},
												{
													"key": "insertOption",
													"value": "Before",
													"description": "Where to insert the new node relative to the target node. Do not specify this if targetNodeId is omitted. Possible values: After, Before",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{lbs_container_id}}"
												},
												{
													"key": "treeId",
													"value": "default"
												}
											]
										},
										"description": "Get all Assets paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-assets-GET/"
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 1: Retrieve the root node ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"    pm.expect(responseBody.results).to.be.an(\"array\");",
											"",
											"    if(responseBody.results.length > 0) {",
											"        pm.environment.set(\"lbs_node_parent_id\", responseBody.results[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}construction/locations/v2/projects/:projectId/trees/:treeId/nodes",
									"host": [
										"{{base_domain}}construction"
									],
									"path": [
										"locations",
										"v2",
										"projects",
										":projectId",
										"trees",
										":treeId",
										"nodes"
									],
									"query": [
										{
											"key": "filter[id]",
											"value": "88e07ccb-4594-4dc5-8973-304412b8fa96,de9aca33-5e0c-4668-85fa-f96273db4b35",
											"description": "Retrieves information about specified nodes (locations) in the tree. Separate multiple values with commas. For example, filter[id]=88e07ccb-4594-4dc5-8973-304412b8fa96,de9aca33-5e0c-4668-85fa-f96273db4b35. Note that the filter includes information about the path of node in the tree hierarchy.",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "10000",
											"description": "The maximum number of nodes per page. Acceptable values: 1-10000. Default value: 10000.",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Number of nodes into the collection that the pagination starts on. This is zero-based.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{lbs_container_id}}",
											"description": "The project ID"
										},
										{
											"key": "treeId",
											"value": "default",
											"description": "The tree ID; must be default. Currently, you can only add one tree (default) to a project. However, in future versions we will support adding more than one tree to a project, and you will be able to select a specific tree."
										}
									]
								},
								"description": "Get all Assets paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-assets-GET/"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Step 4: Update the suite node",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response body is not empty\", () => {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.environment.set(\"lbs_node_id\", responseBody.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Suite 211\",\n    \"barcode\": \"barcodeSuite211\"\n}"
						},
						"url": {
							"raw": "{{base_domain}}construction/locations/v2/projects/:projectId/trees/:treeId/nodes/:nodeId",
							"host": [
								"{{base_domain}}construction"
							],
							"path": [
								"locations",
								"v2",
								"projects",
								":projectId",
								"trees",
								":treeId",
								"nodes",
								":nodeId"
							],
							"query": [
								{
									"key": "targetNodeId",
									"value": null,
									"description": "Where to insert the new node. Unique identifier of a node. Must have the same parent as the new node.",
									"disabled": true
								},
								{
									"key": "insertOption",
									"value": "After",
									"description": "Where to insert the new node relative to the target node. Do not specify this if targetNodeId is omitted. Possible values: After, Before",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{lbs_container_id}}",
									"description": "The project ID"
								},
								{
									"key": "treeId",
									"value": "default",
									"description": "The tree ID; must be default. Currently, you can only add one tree (default) to a project. However, in future versions we will support adding more than one tree to a project, and you will be able to select a specific tree."
								},
								{
									"key": "nodeId",
									"value": "{{lbs_node_id}}",
									"description": "Node ID. Unique identifier of a node."
								}
							]
						},
						"description": "Get all Assets paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-assets-GET/"
					},
					"response": []
				},
				{
					"name": "Step 5: Delete the suite node",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_domain}}construction/locations/v2/projects/:projectId/trees/:treeId/nodes/:nodeId",
							"host": [
								"{{base_domain}}construction"
							],
							"path": [
								"locations",
								"v2",
								"projects",
								":projectId",
								"trees",
								":treeId",
								"nodes",
								":nodeId"
							],
							"query": [
								{
									"key": "targetNodeId",
									"value": null,
									"description": "Where to insert the new node. Unique identifier of a node. Must have the same parent as the new node.",
									"disabled": true
								},
								{
									"key": "insertOption",
									"value": "After",
									"description": "Where to insert the new node relative to the target node. Do not specify this if targetNodeId is omitted. Possible values: After, Before",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{lbs_container_id}}",
									"description": "The project ID"
								},
								{
									"key": "treeId",
									"value": "default",
									"description": "The tree ID; must be default. Currently, you can only add one tree (default) to a project. However, in future versions we will support adding more than one tree to a project, and you will be able to select a specific tree."
								},
								{
									"key": "nodeId",
									"value": "{{lbs_node_id}}",
									"description": "Node ID. Unique identifier of a node."
								}
							]
						},
						"description": "Get all Assets paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-assets-GET/"
					},
					"response": []
				}
			]
		},
		{
			"name": "API References",
			"item": [
				{
					"name": "Run Firstly-Get Project ID",
					"item": [
						{
							"name": "GET one ACC account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// find the specified project and setup the environment variable \"hub_id\"",
											"const hub_name = pm.environment.get(\"hub_name\");",
											"pm.test(\"find matches account by name: \" + hub_name, function () {",
											"    const body = JSON.parse(responseBody);",
											"    const found = body.data.find(d => d.attributes.name == hub_name);",
											"",
											"    pm.expect(found).to.not.be.undefined;",
											"    ",
											"    pm.environment.set(\"hub_id\", found.id);",
											"    pm.environment.set(\"account_id\", found.id.split(\"b.\").join(\"\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"hub_name\", \"change to your hub/account name\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}/project/v1/hubs?filter[extension.type]=hubs:autodesk.bim360:Account",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"project",
										"v1",
										"hubs"
									],
									"query": [
										{
											"key": "filter[extension.type]",
											"value": "hubs:autodesk.bim360:Account"
										}
									]
								},
								"description": "Returns a collection of accessible hubs for this member.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-GET/"
							},
							"response": []
						},
						{
							"name": "GET one ACC project",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"project_name\", \"change to your project name\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// find the specified project and setup the environment variable \"project_id\"",
											"const project_name = pm.environment.get(\"project_name\") ",
											"pm.test(\"find matches project by name: \" + project_name, function () {",
											"    const body = JSON.parse(responseBody);",
											"    const found = body.data.find(d => d.attributes.name == project_name)",
											"",
											"    pm.expect(found).to.not.be.undefined;",
											"    ",
											"    postman.setEnvironmentVariable(\"project_id\", found.id);",
											"    postman.setEnvironmentVariable(\"project_id_without_b\", found.id.split(\"b.\").join(\"\"));",
											"    postman.setEnvironmentVariable(\"lbs_container_id\", found.id.split(\"b.\").join(\"\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}project/v1/hubs/{{hub_id}}/projects",
									"host": [
										"{{base_domain}}project"
									],
									"path": [
										"v1",
										"hubs",
										"{{hub_id}}",
										"projects"
									]
								},
								"description": "Returns a collection of projects for a given hub_id. A project represents a BIM 360 Team project, a Fusion Team project, a BIM 360 Docs project, or an A360 Personal project. Multiple projects can be created within a single hub.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-hub_id-projects-GET/"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Locations - GET List nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response body is not empty\", () => {",
									"    var responseBody = pm.response.json();",
									"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
									"    pm.expect(responseBody.results).to.be.an(\"array\");",
									"",
									"    if(responseBody.results.length > 0) {",
									"        pm.environment.set(\"lbs_node_parent_id\", responseBody.results[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_domain}}construction/locations/v2/projects/:projectId/trees/:treeId/nodes",
							"host": [
								"{{base_domain}}construction"
							],
							"path": [
								"locations",
								"v2",
								"projects",
								":projectId",
								"trees",
								":treeId",
								"nodes"
							],
							"query": [
								{
									"key": "filter[id]",
									"value": "88e07ccb-4594-4dc5-8973-304412b8fa96,de9aca33-5e0c-4668-85fa-f96273db4b35",
									"description": "Retrieves information about specified nodes (locations) in the tree. Separate multiple values with commas. For example, filter[id]=88e07ccb-4594-4dc5-8973-304412b8fa96,de9aca33-5e0c-4668-85fa-f96273db4b35. Note that the filter includes information about the path of node in the tree hierarchy.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10000",
									"description": "The maximum number of nodes per page. Acceptable values: 1-10000. Default value: 10000.",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Number of nodes into the collection that the pagination starts on. This is zero-based.",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{lbs_container_id}}",
									"description": "The project ID"
								},
								{
									"key": "treeId",
									"value": "default",
									"description": "The tree ID; must be default. Currently, you can only add one tree (default) to a project. However, in future versions we will support adding more than one tree to a project, and you will be able to select a specific tree."
								}
							]
						},
						"description": "Get all Assets paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-assets-GET/"
					},
					"response": []
				},
				{
					"name": "Locations - POST Create nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response body is not empty\", () => {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.environment.set(\"lbs_node_id\", responseBody.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function guid(format = 'xxxxxxxxxx') {",
									"    var d = new Date().getTime()",
									"",
									"    var guid = format.replace(",
									"      /[xy]/g,",
									"      function (c) {",
									"        var r = (d + Math.random() * 16) % 16 | 0",
									"        d = Math.floor(d / 16)",
									"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
									"      })",
									"",
									"    return guid",
									"  }",
									"",
									"pm.environment.set(\"lbs_node_name\", \"Locations API Tutorial Node-\" + guid());",
									"pm.environment.set(\"lbs_node_barcode\", guid());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"parentId\": \"{{lbs_node_parent_id}}\",\n    \"type\": \"Area\",\n    \"name\": \"{{lbs_node_name}}\",\n    \"description\": \"An Area Node for Locations API Tutorial.\",\n    \"barcode\": \"{{lbs_node_barcode}}\"\n}"
						},
						"url": {
							"raw": "{{base_domain}}construction/locations/v2/projects/:projectId/trees/:treeId/nodes",
							"host": [
								"{{base_domain}}construction"
							],
							"path": [
								"locations",
								"v2",
								"projects",
								":projectId",
								"trees",
								":treeId",
								"nodes"
							],
							"query": [
								{
									"key": "targetNodeId",
									"value": "032cdf7c-0d8f-476b-b338-7de55718535f",
									"description": "Where to insert the new node. Unique identifier of a node. Must have the same parent as the new node.",
									"disabled": true
								},
								{
									"key": "insertOption",
									"value": "Before",
									"description": "Where to insert the new node relative to the target node. Do not specify this if targetNodeId is omitted. Possible values: After, Before",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{lbs_container_id}}"
								},
								{
									"key": "treeId",
									"value": "default"
								}
							]
						},
						"description": "Get all Assets paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-assets-GET/"
					},
					"response": []
				},
				{
					"name": "Locations - POST Create nodes(BEFORE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response body is not empty\", () => {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.environment.set(\"lbs_node_id\", responseBody.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function guid(format = 'xxxxxxxxxx') {",
									"    var d = new Date().getTime()",
									"",
									"    var guid = format.replace(",
									"      /[xy]/g,",
									"      function (c) {",
									"        var r = (d + Math.random() * 16) % 16 | 0",
									"        d = Math.floor(d / 16)",
									"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
									"      })",
									"",
									"    return guid",
									"  }",
									"",
									"pm.environment.set(\"lbs_node_name\", \"Locations API Tutorial Node-\" + guid());",
									"pm.environment.set(\"lbs_node_barcode\", guid());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"parentId\": \"{{lbs_node_parent_id}}\",\n    \"type\": \"Area\",\n    \"name\": \"{{lbs_node_name}} BF\",\n    \"description\": \"An Area Node for Locations API Tutorial.\",\n    \"barcode\": \"{{lbs_node_barcode}}\"\n}"
						},
						"url": {
							"raw": "{{base_domain}}construction/locations/v2/projects/:projectId/trees/:treeId/nodes?targetNodeId={{lbs_node_id}}&insertOption=Before",
							"host": [
								"{{base_domain}}construction"
							],
							"path": [
								"locations",
								"v2",
								"projects",
								":projectId",
								"trees",
								":treeId",
								"nodes"
							],
							"query": [
								{
									"key": "targetNodeId",
									"value": "{{lbs_node_id}}",
									"description": "Where to insert the new node. Unique identifier of a node. Must have the same parent as the new node."
								},
								{
									"key": "insertOption",
									"value": "Before",
									"description": "Where to insert the new node relative to the target node. Do not specify this if targetNodeId is omitted. Possible values: After, Before"
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{lbs_container_id}}"
								},
								{
									"key": "treeId",
									"value": "default"
								}
							]
						},
						"description": "Get all Assets paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-assets-GET/"
					},
					"response": []
				},
				{
					"name": "Locations - POST Create nodes(AFTER)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response body is not empty\", () => {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.environment.set(\"lbs_node_id\", responseBody.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function guid(format = 'xxxxxxxxxx') {",
									"    var d = new Date().getTime()",
									"",
									"    var guid = format.replace(",
									"      /[xy]/g,",
									"      function (c) {",
									"        var r = (d + Math.random() * 16) % 16 | 0",
									"        d = Math.floor(d / 16)",
									"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
									"      })",
									"",
									"    return guid",
									"  }",
									"",
									"pm.environment.set(\"lbs_node_name\", \"Locations API Tutorial Node-\" + guid());",
									"pm.environment.set(\"lbs_node_barcode\", guid());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"parentId\": \"{{lbs_node_parent_id}}\",\n    \"type\": \"Area\",\n    \"name\": \"{{lbs_node_name}} AF\",\n    \"description\": \"An Area Node for Locations API Tutorial.\",\n    \"barcode\": \"{{lbs_node_barcode}}\"\n}"
						},
						"url": {
							"raw": "{{base_domain}}construction/locations/v2/projects/:projectId/trees/:treeId/nodes?targetNodeId={{lbs_node_id}}&insertOption=After",
							"host": [
								"{{base_domain}}construction"
							],
							"path": [
								"locations",
								"v2",
								"projects",
								":projectId",
								"trees",
								":treeId",
								"nodes"
							],
							"query": [
								{
									"key": "targetNodeId",
									"value": "{{lbs_node_id}}",
									"description": "Where to insert the new node. Unique identifier of a node. Must have the same parent as the new node."
								},
								{
									"key": "insertOption",
									"value": "After",
									"description": "Where to insert the new node relative to the target node. Do not specify this if targetNodeId is omitted. Possible values: After, Before"
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{lbs_container_id}}"
								},
								{
									"key": "treeId",
									"value": "default"
								}
							]
						},
						"description": "Get all Assets paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-assets-GET/"
					},
					"response": []
				},
				{
					"name": "Locations - Update nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response body is not empty\", () => {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.environment.set(\"lbs_node_id\", responseBody.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function guid(format = 'xxxxxxxxxx') {",
									"    var d = new Date().getTime()",
									"",
									"    var guid = format.replace(",
									"      /[xy]/g,",
									"      function (c) {",
									"        var r = (d + Math.random() * 16) % 16 | 0",
									"        d = Math.floor(d / 16)",
									"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
									"      })",
									"",
									"    return guid",
									"  }",
									"",
									"pm.environment.set(\"lbs_node_name\", \"Locations API Tutorial Node-\" + guid());",
									"pm.environment.set(\"lbs_node_barcode\", guid());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{lbs_node_name}}\",\n    \"barcode\": \"{{lbs_node_barcode}}\"\n}"
						},
						"url": {
							"raw": "{{base_domain}}construction/locations/v2/projects/:projectId/trees/:treeId/nodes/:nodeId",
							"host": [
								"{{base_domain}}construction"
							],
							"path": [
								"locations",
								"v2",
								"projects",
								":projectId",
								"trees",
								":treeId",
								"nodes",
								":nodeId"
							],
							"query": [
								{
									"key": "targetNodeId",
									"value": null,
									"description": "Where to insert the new node. Unique identifier of a node. Must have the same parent as the new node.",
									"disabled": true
								},
								{
									"key": "insertOption",
									"value": "After",
									"description": "Where to insert the new node relative to the target node. Do not specify this if targetNodeId is omitted. Possible values: After, Before",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{lbs_container_id}}",
									"description": "The project ID"
								},
								{
									"key": "treeId",
									"value": "default",
									"description": "The tree ID; must be default. Currently, you can only add one tree (default) to a project. However, in future versions we will support adding more than one tree to a project, and you will be able to select a specific tree."
								},
								{
									"key": "nodeId",
									"value": "{{lbs_node_id}}",
									"description": "Node ID. Unique identifier of a node."
								}
							]
						},
						"description": "Get all Assets paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-assets-GET/"
					},
					"response": []
				},
				{
					"name": "Locations - DELETE nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_domain}}construction/locations/v2/projects/:projectId/trees/:treeId/nodes/:nodeId",
							"host": [
								"{{base_domain}}construction"
							],
							"path": [
								"locations",
								"v2",
								"projects",
								":projectId",
								"trees",
								":treeId",
								"nodes",
								":nodeId"
							],
							"query": [
								{
									"key": "targetNodeId",
									"value": null,
									"description": "Where to insert the new node. Unique identifier of a node. Must have the same parent as the new node.",
									"disabled": true
								},
								{
									"key": "insertOption",
									"value": "After",
									"description": "Where to insert the new node relative to the target node. Do not specify this if targetNodeId is omitted. Possible values: After, Before",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{lbs_container_id}}",
									"description": "The project ID"
								},
								{
									"key": "treeId",
									"value": "default",
									"description": "The tree ID; must be default. Currently, you can only add one tree (default) to a project. However, in future versions we will support adding more than one tree to a project, and you will be able to select a specific tree."
								},
								{
									"key": "nodeId",
									"value": "{{lbs_node_id}}",
									"description": "Node ID. Unique identifier of a node."
								}
							]
						},
						"description": "Get all Assets paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-assets-GET/"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "scope",
				"value": "data:read data:write",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{client_id}}",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{client_secret}}",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "3LO Access Token",
				"type": "string"
			},
			{
				"key": "challengeAlgorithm",
				"value": "S256",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://www.postman.com/oauth2/callback",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "authorization_code",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "{{base_domain}}authentication/v1/authorize",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "body",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "{{base_domain}}authentication/v1/gettoken",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}