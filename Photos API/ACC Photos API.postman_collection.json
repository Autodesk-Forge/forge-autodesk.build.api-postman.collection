{
	"info": {
		"_postman_id": "5dc6f19d-bc49-4b10-948b-7cf06aa54c3a",
		"name": "ACC Photos API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Run Firstly-Get Project ID",
			"item": [
				{
					"name": "GET one ACC account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// find the specified project and setup the environment variable \"hub_id\"",
									"const hub_name = pm.environment.get(\"hub_name\");",
									"pm.test(\"find matches account by name: \" + hub_name, function () {",
									"    const body = JSON.parse(responseBody);",
									"    const found = body.data.find(d => d.attributes.name == hub_name);",
									"",
									"    pm.expect(found).to.not.be.undefined;",
									"    ",
									"    pm.environment.set(\"hub_id\", found.id);",
									"    pm.environment.set(\"account_id\", found.id.split(\"b.\").join(\"\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"hub_name\", \"change to your hub/account name\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/project/v1/hubs?filter[extension.type]=hubs:autodesk.bim360:Account",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"project",
								"v1",
								"hubs"
							],
							"query": [
								{
									"key": "filter[extension.type]",
									"value": "hubs:autodesk.bim360:Account"
								}
							]
						},
						"description": "Returns a collection of accessible hubs for this member.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-GET/"
					},
					"response": []
				},
				{
					"name": "GET one ACC project",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"project_name\", \"change to your project name\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// find the specified project and setup the environment variable \"project_id\"",
									"const project_name = pm.environment.get(\"project_name\") ",
									"pm.test(\"find matches project by name: \" + project_name, function () {",
									"    const body = JSON.parse(responseBody);",
									"    const found = body.data.find(d => d.attributes.name == project_name)",
									"",
									"    pm.expect(found).to.not.be.undefined;",
									"    ",
									"    postman.setEnvironmentVariable(\"project_id\", found.id);",
									"    postman.setEnvironmentVariable(\"project_id_without_b\", found.id.split(\"b.\").join(\"\"));    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}project/v1/hubs/{{hub_id}}/projects",
							"host": [
								"{{base_domain}}project"
							],
							"path": [
								"v1",
								"hubs",
								"{{hub_id}}",
								"projects"
							]
						},
						"description": "Returns a collection of projects for a given hub_id. A project represents a BIM 360 Team project, a Fusion Team project, a BIM 360 Docs project, or an A360 Personal project. Multiple projects can be created within a single hub.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-hub_id-projects-GET/"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Photos - POST photos:filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type header present and is application/json\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response body is not empty\", () => {",
							"    var responseBody = pm.response.json();",
							"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
							"    pm.expect(responseBody.results).to.be.an(\"array\");",
							"",
							"    if(responseBody.results.length > 0) {",
							"        pm.environment.set(\"photo_id\", responseBody.results[0].id);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": "gzip, deflate",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sort\": [\"createdAt\", \"asc\"]\n}"
				},
				"url": {
					"raw": "{{base_domain}}construction/photos/v1/projects/:projectId/photos:filter",
					"host": [
						"{{base_domain}}construction"
					],
					"path": [
						"photos",
						"v1",
						"projects",
						":projectId",
						"photos:filter"
					],
					"query": [
						{
							"key": "include",
							"value": "signedUrls",
							"description": "Extra fields to be returned for each Photo Objects. (e.g. signedUrls) Will always be: signedUrls",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "projectId",
							"value": "{{project_id_without_b}}",
							"description": "Unique identifier of the project."
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Photos - GET photos/:photoId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type header present and is application/json\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response body is not empty\", () => {",
							"    var responseBody = pm.response.json();",
							"    pm.expect(responseBody).to.have.property(\"id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": "gzip, deflate",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{base_domain}}construction/photos/v1/projects/:projectId/photos/:photoId",
					"host": [
						"{{base_domain}}construction"
					],
					"path": [
						"photos",
						"v1",
						"projects",
						":projectId",
						"photos",
						":photoId"
					],
					"query": [
						{
							"key": "include",
							"value": "signedUrls",
							"description": "Extra fields to be returned for each Photo Objects. (e.g. signedUrls) Will always be: signedUrls",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "projectId",
							"value": "{{project_id_without_b}}",
							"description": "Unique identifier of the project."
						},
						{
							"key": "photoId",
							"value": "{{photo_id}}",
							"description": "Unique identifier of the media."
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "clientId",
				"value": "{{client_id}}",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{client_secret}}",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "{{base_domain}}authentication/v1/gettoken",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "{{base_domain}}authentication/v1/authorize",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "3LO Access Token",
				"type": "string"
			},
			{
				"key": "scope",
				"value": "data:read data:write",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "authorization_code",
				"type": "string"
			},
			{
				"key": "challengeAlgorithm",
				"value": "S256",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://www.postman.com/oauth2/callback",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "body",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}