{
	"info": {
		"_postman_id": "d15e262e-4f4a-41d4-8dd8-d155727aebc2",
		"name": "Form API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tutorials",
			"item": [
				{
					"name": "Get Forms",
					"item": [
						{
							"name": "Step 1: GET one ACC account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get hub collection, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const acc_account_name = pm.environment.get(\"acc_account_name\") ",
											"",
											"pm.test(\"find matched acc account by name: \" + acc_account_name, function () {",
											"    const body = JSON.parse(responseBody);",
											"    const find = body.data.find(d=>d.attributes.name == acc_account_name)",
											"",
											"    pm.expect(find).not.eq(undefined); ",
											"    ",
											"    if(find){",
											"        pm.environment.set(\"acc_account_id\", find.id);",
											"        pm.environment.set(\"acc_account_id_without_b\", find.id.split(\"b.\").join(\"\"));",
											"    }else{",
											"        ",
											"    } ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}/project/v1/hubs",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"project",
										"v1",
										"hubs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 2: GET one ACC project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get project collection, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const acc_project_name = pm.environment.get(\"acc_project_name\") ",
											"pm.test(\"find matched acc project by name: \" + acc_project_name, function () {",
											"    const body = JSON.parse(responseBody);",
											"    const find = body.data.find(d=>d.attributes.name == acc_project_name)",
											"",
											"    pm.expect(find).not.eq(undefined); ",
											"    ",
											"    if(find){",
											"        pm.environment.set(\"acc_project_id\", find.id);",
											"        pm.environment.set(\"acc_project_id_without_b\", find.id.split(\"b.\").join(\"\"));",
											"    }else{",
											"        ",
											"    }",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}/project/v1/hubs/{{acc_account_id}}/projects?page[limit]=200",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"project",
										"v1",
										"hubs",
										"{{acc_account_id}}",
										"projects"
									],
									"query": [
										{
											"key": "page[limit]",
											"value": "200"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 3: Get one web-form and one pdf templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get templates collection, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"find one pdf template id and signed url: \" , function () {",
											"    const body = JSON.parse(responseBody);",
											"    const find = body.data.find(d=>d.isPdf==true )",
											"",
											"    pm.expect(find).not.eq(undefined); ",
											"    ",
											"    if(find){",
											"        pm.environment.set(\"pdf_template_id\", find.id);",
											"",
											"",
											"        var sections = find.pdfUrl.split(\"?\"); ",
											"        pm.environment.set(\"signed_url\", sections[0]);  ",
											"",
											"        var params = sections[1].split(\"&\");",
											"        pm.environment.set(\"Signature\", params[0].split(\"=\")[1]);",
											"        pm.environment.set(\"Expires\", params[1].split(\"=\")[1]); ",
											"        pm.environment.set(\"AWSAccessKeyId\", params[2].split(\"=\")[1]);",
											"        pm.environment.set(\"response-content-disposition\", params[3].split(\"=\")[1]);",
											"",
											"",
											"     }else{",
											"        ",
											"    } ",
											"});",
											"",
											"pm.test(\"find one web-form template: \" , function () {",
											"    const body = JSON.parse(responseBody);",
											"    const find = body.data.find(d=>d.isPdf==false )",
											"",
											"    pm.expect(find).not.eq(undefined); ",
											"    ",
											"    if(find){",
											"        pm.environment.set(\"web_form_template_id\", find.id);",
											"",
											"     }else{",
											"        ",
											"    } ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}/construction/forms/v1/projects/:projectId/form-templates?offset=0&limit=50",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"construction",
										"forms",
										"v1",
										"projects",
										":projectId",
										"form-templates"
									],
									"query": [
										{
											"key": "offset",
											"value": "0",
											"description": "Number of results to skip."
										},
										{
											"key": "updatedAfter",
											"value": "2021-02-28T00:00:00",
											"description": "Return Templates updated after specified time.",
											"disabled": true
										},
										{
											"key": "updatedBefore",
											"value": "<dateTime>",
											"description": "Return Templates updated before specified time.",
											"disabled": true
										},
										{
											"key": "sortOrder",
											"value": "<string>",
											"description": "Return Templates in specified sorted order.",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "50"
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{acc_project_id_without_b}}",
											"description": "(Required) Unique identifier of the project."
										}
									]
								},
								"description": "Returns all project's form templates the user has access to."
							},
							"response": []
						},
						{
							"name": "Step 4: Download one pdf template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Download one pdf template, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{signed_url}}?AWSAccessKeyId={{AWSAccessKeyId}}&Expires={{Expires}}&Signature={{Signature}}&response-content-disposition={{response-content-disposition}}",
									"host": [
										"{{signed_url}}"
									],
									"query": [
										{
											"key": "AWSAccessKeyId",
											"value": "{{AWSAccessKeyId}}"
										},
										{
											"key": "Expires",
											"value": "{{Expires}}"
										},
										{
											"key": "Signature",
											"value": "{{Signature}}"
										},
										{
											"key": "response-content-disposition",
											"value": "{{response-content-disposition}}"
										}
									]
								},
								"description": "Returns all project's form templates the user has access to."
							},
							"response": []
						},
						{
							"name": "Step 5: Get forms of web-form template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get forms of web-form template, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IlU3c0dGRldUTzlBekNhSzBqZURRM2dQZXBURVdWN2VhIn0.eyJzY29wZSI6WyJhY2NvdW50OnJlYWQiLCJhY2NvdW50OndyaXRlIiwiYnVja2V0OmNyZWF0ZSIsImJ1Y2tldDpyZWFkIiwiYnVja2V0OnVwZGF0ZSIsImJ1Y2tldDpkZWxldGUiLCJkYXRhOnJlYWQiLCJkYXRhOndyaXRlIiwiZGF0YTpjcmVhdGUiLCJkYXRhOnNlYXJjaCIsInVzZXI6cmVhZCIsInVzZXI6d3JpdGUiLCJ1c2VyLXByb2ZpbGU6cmVhZCIsInZpZXdhYmxlczpyZWFkIl0sImNsaWVudF9pZCI6IktrSmZwTVoyZ2NBWEEzZ25EUkdod3Z5UDdaSG1tV25aIiwiYXVkIjoiaHR0cHM6Ly9hdXRvZGVzay5jb20vYXVkL2Fqd3RleHA2MCIsImp0aSI6Imk1S2ZOT1prRFNlWmtuRmxyT2VrNjNBVVVSOTZrMHc3VFc4VGxqUndYdWliYkRDeWRkNUU1aFRkSEV1UWtmajYiLCJ1c2VyaWQiOiJRRjQ1TlJXOE5LRzQiLCJleHAiOjE2MTE2MTk1OTJ9.BcZ08zvGqKaKN7h1nF2c9blVCbYq3TqHxKpeq-RXsaLJ6GuaJSC7q1pay91dl-jUzIan6a2yBJKgKDdLPNHmBU8_7X9qLRz0Rm9IhGPvq_t4FD16dggXxWBK6YwvoxQW7qO6X9-fK4V1-QFGUBISFwrd3uNnFx-YVxbvZuIXIeZDV2SJ6tG3zf0R5gLMR6QX9Ry2H1W8thnACa6_Mfp40J4KQFj9oHODvkBRFFfl6tf0L3p-0qt1Y8mJZ0CpSeEm6cavk43Nr0ZVzDeGyPvA4eSySk9g4vYx5scg4tMqYjggutlPQshXL5_Bgox_0fswEomykBVxIbGZZ9z8d5uwaw",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}/construction/forms/v1/projects/:projectId/forms?templateId={{web_form_template_id}}",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"construction",
										"forms",
										"v1",
										"projects",
										":projectId",
										"forms"
									],
									"query": [
										{
											"key": "offset",
											"value": "0",
											"description": "The number of records to skip before returning the result records. Defaults to 0. Increase this value in subsequent requests to continue getting results when the number of records exceeds the requested limit.",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "50",
											"description": "The number of records to return in a single request. Can be a number between 1 and 50. Defaults to 50.",
											"disabled": true
										},
										{
											"key": "ids",
											"value": "<string>",
											"description": "An array of Form IDs to retrieve.",
											"disabled": true
										},
										{
											"key": "formDateMin",
											"value": "<date>",
											"description": "Return Forms with formDate at or after specified date.",
											"disabled": true
										},
										{
											"key": "formDateMax",
											"value": "<date>",
											"description": "Return Forms with formDate at or before specified date.",
											"disabled": true
										},
										{
											"key": "updatedAfter",
											"value": "<dateTime>",
											"description": "Return Forms updated after a specified time.",
											"disabled": true
										},
										{
											"key": "updatedBefore",
											"value": "<dateTime>",
											"description": "Return Forms updated before a specified time.",
											"disabled": true
										},
										{
											"key": "templateId",
											"value": "<string>",
											"description": "Return Forms on template with given ID.",
											"disabled": true
										},
										{
											"key": "statuses",
											"value": "<string>",
											"description": "Return Forms with given statuses.",
											"disabled": true
										},
										{
											"key": "sortBy",
											"value": "<string>",
											"description": "Return Forms sorted by specified attribute.",
											"disabled": true
										},
										{
											"key": "sortOrder",
											"value": "<string>",
											"description": "Return Forms in specified sorted order.",
											"disabled": true
										},
										{
											"key": "templateId",
											"value": "{{web_form_template_id}}"
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{acc_project_id_without_b}}",
											"description": "(Required) Unique identifier of the project."
										}
									]
								},
								"description": "Returns a paginated list of forms in a project. Forms are sorted by updatedAt, most recent first."
							},
							"response": []
						},
						{
							"name": "Step 6: Get forms of pdf template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get forms of pdf template, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"find one pdf form signed url: \" , function () {",
											"    const body = JSON.parse(responseBody);",
											"    const find = body.data.find(d=>d.pdfUrl!=\"\" )",
											"",
											"    pm.expect(find).not.eq(undefined); ",
											"    ",
											"    if(find){",
											"        pm.environment.set(\"one_pdf_form_id\", find.id);",
											"",
											"        var sections = find.pdfUrl.split(\"?\"); ",
											"        pm.environment.set(\"signed_url\", sections[0]);  ",
											"",
											"        var params = sections[1].split(\"&\");",
											"        pm.environment.set(\"Signature\", params[0].split(\"=\")[1]);",
											"        pm.environment.set(\"Expires\", params[1].split(\"=\")[1]); ",
											"        pm.environment.set(\"AWSAccessKeyId\", params[2].split(\"=\")[1]);",
											"        pm.environment.set(\"response-content-disposition\", params[3].split(\"=\")[1]);",
											"",
											"",
											"     }else{",
											"        ",
											"    } ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}/construction/forms/v1/projects/:projectId/forms?templateId={{pdf_template_id}}",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"construction",
										"forms",
										"v1",
										"projects",
										":projectId",
										"forms"
									],
									"query": [
										{
											"key": "offset",
											"value": "0",
											"description": "Number of results to skip.",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "50",
											"description": "Number of results to retrieve.",
											"disabled": true
										},
										{
											"key": "ids",
											"value": "<string>",
											"description": "An array of Form IDs to retrieve.",
											"disabled": true
										},
										{
											"key": "formDateMin",
											"value": "<date>",
											"description": "Return Forms with formDate at or after specified date.",
											"disabled": true
										},
										{
											"key": "formDateMax",
											"value": "<date>",
											"description": "Return Forms with formDate at or before specified date.",
											"disabled": true
										},
										{
											"key": "updatedAfter",
											"value": "<dateTime>",
											"description": "Return Forms updated after a specified time.",
											"disabled": true
										},
										{
											"key": "updatedBefore",
											"value": "<dateTime>",
											"description": "Return Forms updated before a specified time.",
											"disabled": true
										},
										{
											"key": "templateId",
											"value": "<string>",
											"description": "Return Forms on template with given ID.",
											"disabled": true
										},
										{
											"key": "statuses",
											"value": "<string>",
											"description": "Return Forms with given statuses.",
											"disabled": true
										},
										{
											"key": "sortBy",
											"value": "<string>",
											"description": "Return Forms sorted by specified attribute.",
											"disabled": true
										},
										{
											"key": "sortOrder",
											"value": "<string>",
											"description": "Return Forms in specified sorted order.",
											"disabled": true
										},
										{
											"key": "templateId",
											"value": "{{pdf_template_id}}"
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{acc_project_id_without_b}}",
											"description": "(Required) Unique identifier of the project."
										}
									]
								},
								"description": "Returns a paginated list of forms in a project. Forms are sorted by updatedAt, most recent first."
							},
							"response": []
						},
						{
							"name": "Step 7: Download pdf form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Download one pdf template, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{signed_url}}?AWSAccessKeyId={{AWSAccessKeyId}}&Expires={{Expires}}&Signature={{Signature}}&response-content-disposition={{response-content-disposition}}",
									"host": [
										"{{signed_url}}"
									],
									"query": [
										{
											"key": "AWSAccessKeyId",
											"value": "{{AWSAccessKeyId}}"
										},
										{
											"key": "Expires",
											"value": "{{Expires}}"
										},
										{
											"key": "Signature",
											"value": "{{Signature}}"
										},
										{
											"key": "response-content-disposition",
											"value": "{{response-content-disposition}}"
										}
									]
								},
								"description": "Returns all project's form templates the user has access to."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "API References",
			"item": [
				{
					"name": "Run Firstly-Get Project ID",
					"item": [
						{
							"name": "GET one ACC account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get hub collection, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const acc_account_name = pm.environment.get(\"acc_account_name\") ",
											"",
											"pm.test(\"find matches acc account by name: \" + acc_account_name, function () {",
											"    const body = JSON.parse(responseBody);",
											"    const find = body.data.find(d=>d.attributes.name == acc_account_name)",
											"",
											"    pm.expect(find).not.eq(undefined); ",
											"    ",
											"    if(find){",
											"        pm.environment.set(\"acc_account_id\", find.id);",
											"        pm.environment.set(\"acc_account_id_without_b\", find.id.split(\"b.\").join(\"\"));",
											"    }else{",
											"        ",
											"    } ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}/project/v1/hubs",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"project",
										"v1",
										"hubs"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET one ACC project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get project collection, Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const acc_project_name = pm.environment.get(\"acc_project_name\") ",
											"pm.test(\"find matches acc project by name: \" + acc_project_name, function () {",
											"    const body = JSON.parse(responseBody);",
											"    const find = body.data.find(d=>d.attributes.name == acc_project_name)",
											"",
											"    pm.expect(find).not.eq(undefined); ",
											"    ",
											"    if(find){",
											"        pm.environment.set(\"acc_project_id\", find.id);",
											"        pm.environment.set(\"acc_project_id_without_b\", find.id.split(\"b.\").join(\"\"));",
											"    }else{",
											"        ",
											"    }",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}/project/v1/hubs/{{acc_account_id}}/projects?page[limit]=200",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"project",
										"v1",
										"hubs",
										"{{acc_account_id}}",
										"projects"
									],
									"query": [
										{
											"key": "page[limit]",
											"value": "200"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Form Templates",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/construction/forms/v1/projects/:projectId/form-templates",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"forms",
								"v1",
								"projects",
								":projectId",
								"form-templates"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The number of records to skip before returning the result records. Defaults to 0. Increase this value in subsequent requests to continue getting results when the number of records exceeds the requested limit.",
									"disabled": true
								},
								{
									"key": "updatedAfter",
									"value": "2021-02-28T00:00:00",
									"description": "Return Templates updated after specified time.",
									"disabled": true
								},
								{
									"key": "updatedBefore",
									"value": "<dateTime>",
									"description": "Return Templates updated before specified time.",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "<string>",
									"description": "Return Templates in specified sorted order. Possible values: desc, asc",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "50",
									"description": "The number of records to return in a single request. Can be a number between 1 and 50. Defaults to 50.\n",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{acc_project_id_without_b}}",
									"description": "(Required) Unique identifier of the project."
								}
							]
						},
						"description": "Returns all project's form templates the user has access to."
					},
					"response": []
				},
				{
					"name": "Get Forms",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IlU3c0dGRldUTzlBekNhSzBqZURRM2dQZXBURVdWN2VhIn0.eyJzY29wZSI6WyJhY2NvdW50OnJlYWQiLCJhY2NvdW50OndyaXRlIiwiYnVja2V0OmNyZWF0ZSIsImJ1Y2tldDpyZWFkIiwiYnVja2V0OnVwZGF0ZSIsImJ1Y2tldDpkZWxldGUiLCJkYXRhOnJlYWQiLCJkYXRhOndyaXRlIiwiZGF0YTpjcmVhdGUiLCJkYXRhOnNlYXJjaCIsInVzZXI6cmVhZCIsInVzZXI6d3JpdGUiLCJ1c2VyLXByb2ZpbGU6cmVhZCIsInZpZXdhYmxlczpyZWFkIl0sImNsaWVudF9pZCI6IktrSmZwTVoyZ2NBWEEzZ25EUkdod3Z5UDdaSG1tV25aIiwiYXVkIjoiaHR0cHM6Ly9hdXRvZGVzay5jb20vYXVkL2Fqd3RleHA2MCIsImp0aSI6Imk1S2ZOT1prRFNlWmtuRmxyT2VrNjNBVVVSOTZrMHc3VFc4VGxqUndYdWliYkRDeWRkNUU1aFRkSEV1UWtmajYiLCJ1c2VyaWQiOiJRRjQ1TlJXOE5LRzQiLCJleHAiOjE2MTE2MTk1OTJ9.BcZ08zvGqKaKN7h1nF2c9blVCbYq3TqHxKpeq-RXsaLJ6GuaJSC7q1pay91dl-jUzIan6a2yBJKgKDdLPNHmBU8_7X9qLRz0Rm9IhGPvq_t4FD16dggXxWBK6YwvoxQW7qO6X9-fK4V1-QFGUBISFwrd3uNnFx-YVxbvZuIXIeZDV2SJ6tG3zf0R5gLMR6QX9Ry2H1W8thnACa6_Mfp40J4KQFj9oHODvkBRFFfl6tf0L3p-0qt1Y8mJZ0CpSeEm6cavk43Nr0ZVzDeGyPvA4eSySk9g4vYx5scg4tMqYjggutlPQshXL5_Bgox_0fswEomykBVxIbGZZ9z8d5uwaw",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_domain}}/construction/forms/v1/projects/:projectId/forms",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"construction",
								"forms",
								"v1",
								"projects",
								":projectId",
								"forms"
							],
							"query": [
								{
									"key": "offset",
									"value": "0",
									"description": "The number of records to skip before returning the result records. Defaults to 0. Increase this value in subsequent requests to continue getting results when the number of records exceeds the requested limit.\n",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "50",
									"description": "The number of records to return in a single request. Can be a number between 1 and 50. Defaults to 50.\n",
									"disabled": true
								},
								{
									"key": "ids",
									"value": "<string>",
									"description": "An array of Form IDs to retrieve.",
									"disabled": true
								},
								{
									"key": "formDateMin",
									"value": "<date>",
									"description": "Return Forms with formDate at or after specified date.",
									"disabled": true
								},
								{
									"key": "formDateMax",
									"value": "<date>",
									"description": "Return Forms with formDate at or before specified date.",
									"disabled": true
								},
								{
									"key": "updatedAfter",
									"value": "<dateTime>",
									"description": "Return Forms updated after a specified time.",
									"disabled": true
								},
								{
									"key": "updatedBefore",
									"value": "<dateTime>",
									"description": "Return Forms updated before a specified time.",
									"disabled": true
								},
								{
									"key": "templateId",
									"value": "<string>",
									"description": "Return Forms on template with given ID.",
									"disabled": true
								},
								{
									"key": "statuses",
									"value": "draft",
									"description": "Return Forms with given statuses.",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "<string>",
									"description": "Return Forms sorted by specified attribute.",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "<string>",
									"description": "Return Forms in specified sorted order.",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{acc_project_id_without_b}}",
									"description": "(Required) Unique identifier of the project."
								}
							]
						},
						"description": "Returns a paginated list of forms in a project. Forms are sorted by updatedAt, most recent first."
					},
					"response": []
				}
			]
		}
	]
}